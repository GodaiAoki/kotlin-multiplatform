apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    archivesBaseName = android_library_name
    version android_version
    group 'net.irgaly.kotlin'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode android_build
        versionName android_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.each {
        def root = "src/android/${it.name}"
        it.setRoot(root)
        it.java.srcDirs += "${root}/kotlin"
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.name == android.buildTypes.release.name) {
                outputFileName = output.outputFile.name.replace(("-release.aar"), "-${android_version}.aar")
            } else if (variant.name == android.buildTypes.debug.name) {
                outputFileName = output.outputFile.name.replace((".aar"), "-debug-${android_version}.aar")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-beta01'
}


afterEvaluate {
    // dokka 系タスクが定義されたあとに Android 成果物系のタスクを定義したいので遅延実行

    task sourcesJarAndroid(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs + files("src/commonMain/kotlin")
    }

    task javadocJarAndroid(type: Jar, dependsOn: dokkaJavadocAndroid) {
        classifier = 'javadoc'
        from dokkaJavadocAndroid.outputDirectory
    }

    publishing {
        publications {
            android(MavenPublication) {
                artifactId 'multiplatform'
                artifact sourcesJarAndroid
                artifact javadocJarAndroid
                artifact("$buildDir/outputs/aar/multiplatform-${android_version}.aar") {
                    builtBy assembleRelease
                }
            }
        }
        repositories {
            maven {
                url "file://${rootDir.absolutePath}/repository/mvn"
            }
        }
    }
}

tasks.whenTaskAdded { added ->
    if (added.name == 'publishAndroidPublicationToMavenRepository') {
        // AAR publish タスクのエイリアスタスクを定義する
        task uploadAar {
            group = 'upload'
            dependsOn added
        }
    }
}
